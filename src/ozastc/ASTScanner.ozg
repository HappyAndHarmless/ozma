% Scanner for the AST frontend
% @author sjrd

BaseScanner = GumpScanner.'class'

scanner ASTScanner from BaseScanner
   feat
      Reporter

   meth init(reporter: Report)
      GumpScanner.'class', init()

      self.Reporter = Report
   end

   meth ConvertPseudoChars(S $)
      case S
      of &\\|C1|Cr then
         case C1
         of &a then &\a|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &b then &\b|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &f then &\f|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &n then &\n|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &r then &\r|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &t then &\t|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &v then &\v|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &\\ then &\\|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &` then &`|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &" then &"|(ASTScanner, ConvertPseudoChars(Cr $))
         [] &' then &'|(ASTScanner, ConvertPseudoChars(Cr $))
         [] && then &&|(ASTScanner, ConvertPseudoChars(Cr $))
         end
      [] C|Cr then
         C|(ASTScanner, ConvertPseudoChars(Cr $))
      [] nil then
         nil
      end
   end

   % -----------------
   % Token definitions
   % -----------------

   lex space = <[?\t\n\v\f\r ]> end
   lex spacenonl = <[?\t\v\f\r ]> end
   lex lower = <[a-z\337-\366\370-\377]> end
   lex upper = <[A-Z\300-\326\330-\336]> end
   lex digit = <[0-9]> end
   lex nonzerodigit = <[1-9]> end
   lex alphaNum = <{lower}|{upper}|{digit}|_> end
   lex char = <[^\\\x00]> end
   lex variableChar = <[^`\\\x00]> end
   lex atomChar = <[^'\\\x00]> end
   lex stringChar = <[^\"\\\x00]> end
   lex escape = <[abfnrtv\\'\"`&]> end
   lex pseudoChar = <\\{escape}> end
   lex anyChar = <{char}|{pseudoChar}> end

   lex atom = <{lower}{alphaNum}*> end
   lex atomQuoted = <"'"({atomChar}|{pseudoChar})*"'"> end
   lex string = <\"({stringChar}|{pseudoChar})*\"> end
   lex int = <~?{nonzerodigit}{digit}*> end
   lex float = <~?{digit}+"."{digit}*([eE]~?{digit}+)?> end
   
   lex <false>
      ASTScanner, putToken('atom' false)
   end
   
   lex <true>
      ASTScanner, putToken('atom' true)
   end
   
   lex <unit>
      ASTScanner, putToken('atom' unit)
   end

   lex <"("|")"|"["|"]"> A in
      BaseScanner, getAtom(?A)
      BaseScanner, putToken1(A)
   end

   lex <{atom}> A in
      BaseScanner, getAtom(?A)
      BaseScanner, putToken('atom' A)
   end
   lex <{atomQuoted}> S1 S2 in 
      BaseScanner, getString(?S1)
      ASTScanner, ConvertPseudoChars({Strip &' S1} ?S2)
      BaseScanner, putToken('atom' {String.toAtom S2})
   end

   lex <{string}> S1 S2 in 
      BaseScanner, getString(?S1)
      ASTScanner, ConvertPseudoChars({Strip &" S1} ?S2)
      BaseScanner, putToken('string' S2)
   end

   lex <{int}> A in
      BaseScanner, getString(A)
      BaseScanner, putToken('int' {String.toInt A})
   end

   lex <{float}> A in
      BaseScanner, getString(A)
      BaseScanner, putToken('float' {String.toFloat A})
   end

   lex <[ \t\r\n]> skip end

   lex <.> A in
      BaseScanner, getAtom(A)
      {self.Reporter error(coord:unit kind:'scan error'
                           msg:'unrecognized character '#A)}
      BaseScanner, putToken1('error')
   end

   lex <<EOF>>
      BaseScanner, putToken1('EOF')
   end
end
